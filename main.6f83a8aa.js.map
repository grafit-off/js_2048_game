{"version":3,"sources":["scripts/main.js"],"names":["Game","gameEl","scoreEl","querySelector","scoreInfoEl","closest","highestScoreEl","playBtn","messageEl","fieldBody","fieldSize","fieldState","score","gameOver","keyUpHandler","bind","pressHandler","unpressHandler","mouseMoves","start","x","y","end","tileAppearanceAnimation","keyframes","transform","options","duration","easing","scoreRefreshAnimation","highestScore","getRecordFromLocaleStorage","setHighestScoreToMarkup","addEventListener","startGame","changePlayButtonToRestart","hidePromptMessage","generateFieldMarkup","generateTileInRandomPlace","setFieldOpacity","setScore","classList","contains","remove","document","removeEventsListeners","isScoreHigherThanRecord","setRecordToLocaleStorage","isGameWon","showPromptMessage","line","filtredLine","removeZerosInLine","mergeTileInLine","fillLineByZeros","isReversed","isRow","i","getColumnLine","reverseLineBy","slideCurrentLine","j","rowIndex","columnIndex","updateTileByPosition","slideWholeField","e","eventProperties","changedTouches","key","code","slideLeft","slideRight","slideUp","slideDown","isGameLosed","finishGame","addActiveToScoreBy","currentEvent","getPressEventProperties","screenX","screenY","xDiference","yDiference","xAbsDiference","Math","abs","yAbsDiference","removeEventListener","keyupHandler","textContent","add","text","type","value","condition","animate","opacity","style","innerHTML","fieldMarkup","rowMarkup","map","_","generateTile","join","insertAdjacentHTML","tile","localStorage","getItem","setItem","random","floor","generateRandomTileIndex","stateHasEmptyTile","emptyTileFound","generateRandomTilePosition","getTileElementByPosition","tileValue","generateNewTileValue","flat","includes","cell","cellUnderCurrCell","rightCellOfCurrCell","columnLine","push","length","filter","num","reverse","gameSlector","game","init"],"mappings":"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","file":"main.6f83a8aa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\nclass Game {\n  constructor(gameEl) {\n    this.gameEl = gameEl;\n    this.scoreEl = this.gameEl.querySelector('.header__score');\n    this.scoreInfoEl = this.scoreEl.closest('.header__info');\n    this.highestScoreEl = this.gameEl.querySelector('.header__highest-score');\n    this.playBtn = this.gameEl.querySelector('.header__button');\n    this.messageEl = this.gameEl.querySelector('.message');\n    this.fieldBody = this.gameEl.querySelector('.field');\n\n    this.fieldSize = 4;\n    this.fieldState = [];\n\n    this.score = 0;\n    this.gameOver = false;\n\n    this.keyUpHandler = this.keyUpHandler.bind(this);\n    this.pressHandler = this.pressHandler.bind(this);\n    this.unpressHandler = this.unpressHandler.bind(this);\n\n    this.mouseMoves = {\n      start: {\n        x: 0,\n        y: 0,\n      },\n      end: {\n        x: 0,\n        y: 0,\n      },\n    };\n\n    this.tileAppearanceAnimation = {\n      keyframes: [\n        { transform: 'scale(0.5)' }, { transform: 'scale(1)' },\n      ],\n      options: {\n        duration: 400,\n        easing: 'cubic-bezier(0.42, 0.97, 0.52, 1.2)',\n      },\n    };\n\n    this.scoreRefreshAnimation = {\n      keyframes: [\n        { transform: 'scale(0.8)' },\n        { transform: 'scale(1)' },\n      ],\n      options: {\n        duration: 300,\n        easing: 'cubic-bezier(0.42, 0.97, 0.52, 1.1)',\n      },\n    };\n  }\n\n  init() {\n    const highestScore = this.getRecordFromLocaleStorage()\n      ? this.getRecordFromLocaleStorage()\n      : 0;\n\n    this.setHighestScoreToMarkup(highestScore);\n\n    this.playBtn.addEventListener('click', () => {\n      this.startGame();\n      this.changePlayButtonToRestart();\n      this.hidePromptMessage();\n    });\n  }\n\n  startGame() {\n    this.gameOver = false;\n\n    this.fieldState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.generateFieldMarkup();\n    this.generateTileInRandomPlace();\n    this.generateTileInRandomPlace();\n    this.setFieldOpacity();\n    this.setScore(0);\n\n    if (this.scoreInfoEl.classList.contains('header__info--active')) {\n      this.scoreInfoEl.classList.remove('header__info--active');\n    };\n\n    document.addEventListener('keyup', this.keyUpHandler);\n\n    document.addEventListener('mousedown', this.pressHandler);\n    document.addEventListener('mouseup', this.unpressHandler);\n\n    document.addEventListener('touchstart', this.pressHandler);\n    document.addEventListener('touchend', this.unpressHandler);\n  }\n\n  finishGame() {\n    this.gameOver = true;\n    this.removeEventsListeners();\n\n    if (this.isScoreHigherThanRecord()) {\n      this.setRecordToLocaleStorage(this.score);\n      this.setHighestScoreToMarkup(this.score);\n    }\n\n    if (this.isGameWon()) {\n      this.showPromptMessage('Winner! Congrats! You did it!', 'win');\n      this.setFieldOpacity('0.8');\n\n      return;\n    }\n\n    this.showPromptMessage('You lose! Restart the game?');\n    this.setFieldOpacity('0.5');\n  }\n\n  // Slides\n  slideCurrentLine(line) {\n    let filtredLine = this.removeZerosInLine(line);\n\n    this.mergeTileInLine(filtredLine);\n\n    filtredLine = this.removeZerosInLine(filtredLine);\n    this.fillLineByZeros(filtredLine);\n\n    return filtredLine;\n  }\n\n  slideWholeField(isReversed, isRow) {\n    for (let i = 0; i < this.fieldSize; i++) {\n      let line = isRow\n        ? this.fieldState[i]\n        : this.getColumnLine(i);\n\n      line = this.reverseLineBy(isReversed, line);\n      line = this.slideCurrentLine(line);\n      line = this.reverseLineBy(isReversed, line);\n\n      for (let j = 0; j < this.fieldSize; j++) {\n        const rowIndex = isRow ? i : j;\n        const columnIndex = isRow ? j : i;\n\n        this.fieldState[rowIndex][columnIndex] = line[j];\n\n        this.updateTileByPosition(rowIndex, columnIndex);\n      }\n    }\n  }\n\n  slideLeft() {\n    this.slideWholeField(false, true);\n  }\n\n  slideRight() {\n    this.slideWholeField(true, true);\n  }\n\n  slideUp() {\n    this.slideWholeField(false, false);\n  }\n\n  slideDown() {\n    this.slideWholeField(true, false);\n  }\n  // -- //\n\n  // Listeners\n  getPressEventProperties(e) {\n    let eventProperties = e;\n\n    if (e.changedTouches) {\n      eventProperties = eventProperties.changedTouches[0];\n    }\n\n    return eventProperties;\n  }\n\n  keyUpHandler(e) {\n    const key = e.code;\n\n    if (!this.gameOver) {\n      switch (key) {\n        case 'ArrowLeft':\n          this.slideLeft();\n          break;\n\n        case 'ArrowRight':\n          this.slideRight();\n          break;\n\n        case 'ArrowUp':\n          this.slideUp();\n\n          break;\n\n        case 'ArrowDown':\n          this.slideDown();\n          break;\n\n        default:\n          return;\n      }\n\n      if (this.isGameWon() || this.isGameLosed()) {\n        this.finishGame();\n      }\n\n      this.addActiveToScoreBy(this.isScoreHigherThanRecord());\n      this.generateTileInRandomPlace();\n    }\n  }\n\n  pressHandler(e) {\n    const currentEvent = this.getPressEventProperties(e);\n\n    this.mouseMoves.start.x = currentEvent.screenX;\n    this.mouseMoves.start.y = currentEvent.screenY;\n  }\n\n  unpressHandler(e) {\n    if (!this.gameOver) {\n      const currentEvent = this.getPressEventProperties(e);\n\n      this.mouseMoves.end.x = currentEvent.screenX;\n      this.mouseMoves.end.y = currentEvent.screenY;\n\n      const xDiference = this.mouseMoves.end.x - this.mouseMoves.start.x;\n      const yDiference = this.mouseMoves.end.y - this.mouseMoves.start.y;\n\n      const xAbsDiference = Math.abs(xDiference);\n      const yAbsDiference = Math.abs(yDiference);\n\n      if (xAbsDiference < 50 && yAbsDiference < 50) {\n        return;\n      }\n\n      if (xAbsDiference > yAbsDiference) {\n        xDiference > 0 ? this.slideRight() : this.slideLeft();\n      } else {\n        yDiference > 0 ? this.slideDown() : this.slideUp();\n      }\n\n      if (this.isGameWon() || this.isGameLosed()) {\n        this.finishGame();\n      }\n\n      this.addActiveToScoreBy(this.isScoreHigherThanRecord());\n      this.generateTileInRandomPlace();\n    }\n  }\n\n  removeEventsListeners() {\n    document.removeEventListener('keyup', this.keyupHandler);\n    document.removeEventListener('mousedown', this.pressHandler);\n    document.removeEventListener('mouseup', this.unpressHandler);\n    document.addEventListener('touchstart', this.pressHandler);\n    document.addEventListener('touchend', this.unpressHandler);\n  }\n  // -- //\n\n  // Markup\n  changePlayButtonToRestart() {\n    this.playBtn.textContent = 'Restart';\n    this.playBtn.classList.remove('header__button--start');\n    this.playBtn.classList.add('header__button--restart');\n  }\n\n  showPromptMessage(text, type) {\n    this.messageEl.textContent = text;\n    this.messageEl.classList.value = 'message';\n\n    if (type) {\n      this.messageEl.classList.add(`message--${type}`);\n    }\n  }\n\n  hidePromptMessage() {\n    this.messageEl.classList.add('message--hidden');\n  }\n\n  addActiveToScoreBy(condition) {\n    if (condition) {\n      this.scoreInfoEl.classList.add('header__info--active');\n    }\n  }\n\n  setScore(value = 0) {\n    const { keyframes, options } = this.scoreRefreshAnimation;\n\n    this.score = value;\n    this.scoreEl.textContent = this.score;\n    this.scoreEl.animate(keyframes, options);\n  }\n\n  setHighestScoreToMarkup(highestScore = 0) {\n    this.highestScoreEl.textContent = highestScore;\n  }\n\n  setFieldOpacity(opacity = null) {\n    this.fieldBody.style.opacity = opacity;\n  }\n\n  generateFieldMarkup() {\n    this.fieldBody.innerHTML = '';\n\n    let fieldMarkup = '';\n\n    for (let i = 0; i < this.fieldSize; i++) {\n      const rowMarkup = `\n        <tr class='field__row'>\n          ${this.fieldState[i].map((_, j) => this.generateTile(i, j)).join('')}\n        </tr>\n      `;\n\n      fieldMarkup += rowMarkup;\n    }\n\n    this.fieldBody.insertAdjacentHTML(\n      'beforeend',\n      `<tbody>${fieldMarkup}</tbody>`\n    );\n  }\n\n  generateTile(rowIndex, columnIndex) {\n    const tile = `\n      <td class=\"field__cell\" data-position=\"${rowIndex}-${columnIndex}\">\n        ${this.fieldState[rowIndex][columnIndex] || ''}\n      </td>\n    `;\n\n    return tile;\n  }\n  // -- //\n\n  // localeStorage\n  getRecordFromLocaleStorage() {\n    return localStorage.getItem('best-score');\n  }\n\n  setRecordToLocaleStorage(score) {\n    localStorage.setItem('best-score', score);\n  }\n\n  // New Tile Generation\n  generateNewTileValue() {\n    return Math.random() >= 0.9 ? 4 : 2;\n  }\n\n  generateRandomTileIndex() {\n    return Math.floor(Math.random() * this.fieldSize);\n  }\n\n  generateRandomTilePosition() {\n    return [this.generateRandomTileIndex(), this.generateRandomTileIndex()];\n  }\n\n  generateTileInRandomPlace() {\n    if (!this.stateHasEmptyTile()) {\n      return;\n    }\n\n    let emptyTileFound = false;\n\n    while (!emptyTileFound) {\n      const [rowIndex, columnIndex] = this.generateRandomTilePosition();\n\n      if (this.fieldState[rowIndex][columnIndex] === 0) {\n        const tile = this.getTileElementByPosition(rowIndex, columnIndex);\n        const tileValue = this.generateNewTileValue();\n        const { keyframes, options } = this.tileAppearanceAnimation;\n\n        this.fieldState[rowIndex][columnIndex] = tileValue;\n        tile.textContent = tileValue;\n        tile.classList.add(`field__cell--${tileValue}`);\n        tile.animate(keyframes, options);\n        emptyTileFound = true;\n      }\n    }\n  }\n  // -- //\n\n  // Utils\n  isGameWon() {\n    return this.fieldState.flat().includes(2048);\n  }\n\n  isGameLosed() {\n    if (this.stateHasEmptyTile()) {\n      return false;\n    }\n\n    for (let i = 0; i < this.fieldSize; i++) {\n      for (let j = 0; j < this.fieldSize; j++) {\n        const cell = this.fieldState[i][j];\n\n        const cellUnderCurrCell = this.fieldState[i + 1]\n          ? this.fieldState[i + 1][j]\n          : null;\n\n        const rightCellOfCurrCell = this.fieldState[i][j + 1] || null;\n\n        if (\n          cell !== 0\n          && (cell === cellUnderCurrCell || cell === rightCellOfCurrCell)\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isScoreHigherThanRecord() {\n    return this.score > +this.getRecordFromLocaleStorage();\n  }\n\n  getTileElementByPosition(rowIndex, columnIndex) {\n    return document.querySelector(\n      `[data-position = '${rowIndex + '-' + columnIndex}']`\n    );\n  }\n\n  updateTileByPosition(rowIndex, columnIndex) {\n    const tile = this.getTileElementByPosition(rowIndex, columnIndex);\n    const tileValue = this.fieldState[rowIndex][columnIndex];\n\n    tile.textContent = '';\n    tile.classList.value = 'field__cell';\n\n    if (tileValue > 0) {\n      tile.textContent = tileValue;\n      tile.classList.add('field__cell--' + tileValue);\n    }\n  }\n\n  getColumnLine(columnIndex) {\n    const columnLine = [];\n\n    for (let i = 0; i < this.fieldSize; i++) {\n      columnLine.push(this.fieldState[i][columnIndex]);\n    }\n\n    return columnLine;\n  }\n\n  fillLineByZeros(line) {\n    while (line.length < this.fieldSize) {\n      line.push(0);\n    }\n  }\n\n  removeZerosInLine(line) {\n    return line.filter((num) => num !== 0);\n  }\n\n  mergeTileInLine(line) {\n    for (let i = 0; i < line.length - 1; i++) {\n      if (line[i] === line[i + 1]) {\n        line[i] *= 2;\n        line[i + 1] = 0;\n        this.setScore(this.score + line[i]);\n      }\n    }\n  }\n\n  reverseLineBy(condition, line) {\n    return condition ? line.reverse() : line;\n  }\n\n  stateHasEmptyTile() {\n    for (let i = 0; i < this.fieldSize; i++) {\n      for (let j = 0; j < this.fieldSize; j++) {\n        if (this.fieldState[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nconst gameSlector = document.querySelector('.game');\nconst game = new Game(gameSlector);\n\ngame.init();\n"]}